package ru.cororo.corasense.telegram.clients

import eu.vendeli.tgbot.TelegramBot
import eu.vendeli.tgbot.annotations.CommandHandler
import eu.vendeli.tgbot.api.answer.answerCallbackQuery
import eu.vendeli.tgbot.api.message.message
import eu.vendeli.tgbot.types.User
import eu.vendeli.tgbot.types.internal.CallbackQueryUpdate
import eu.vendeli.tgbot.utils.setChain
import org.koin.core.component.get
import ru.cororo.corasense.inject.telegramApi
import ru.cororo.corasense.model.client.data.Client
import ru.cororo.corasense.service.ClientService
import java.util.*

@CommandHandler(["/clients"])
suspend fun clients(user: User, bot: TelegramBot) = telegramApi {
    message {
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ \uD83D\uDC47"
    }.inlineKeyboardMarkup {
        callbackData("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞") { "create-client" }
        br()
        callbackData("\uD83D\uDD0E –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –ª–æ–≥–∏–Ω—É") { "find-client-by-name" }
        br()
        callbackData("\uD83D\uDD0E –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID") { "find-client-by-id" }
    }.send(user, bot)
}

@CommandHandler.CallbackQuery(["create-client"])
suspend fun createClient(user: User, bot: TelegramBot, update: CallbackQueryUpdate) = telegramApi {
    answerCallbackQuery(update.callbackQuery.id).send(user, bot)
    message { "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ UUID –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏ —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ." }
        .replyKeyboardMarkup { +"–°–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ" }.send(user, bot)
    bot.inputListener.setChain(user, CreateClientChain.Uuid)
}

internal suspend fun sendClientInfo(user: User, bot: TelegramBot, client: Client) =
    message {
        """
        üìî ID: ${client.id}
        ‚úèÔ∏è –õ–æ–≥–∏–Ω: ${client.login}
        üåø –í–æ–∑—Ä–∞—Å—Ç: ${client.age}
        üë®‚Äçü¶± –ü–æ–ª: ${client.gender.russianName}
        üó∫ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${client.location}
    """.trimIndent()
    }
        .inlineKeyboardMarkup {
            callbackData("‚úè\uFE0F –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω") { "change-client-login?id=${client.id}" }
            br()
            callbackData("‚úè\uFE0F –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç") { "change-client-age?id=${client.id}" }
            br()
            callbackData("‚úè\uFE0F –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª") { "change-client-gender?id=${client.id}" }
            br()
            callbackData("‚úè\uFE0F –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ") { "change-client-location?id=${client.id}" }
            br()
            callbackData("\uD83D\uDDBC –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É") { "client-view-ad?id=${client.id}" }
        }
        .send(user, bot)

@CommandHandler.CallbackQuery(["configure-client"])
suspend fun configureClient(id: String, user: User, bot: TelegramBot, update: CallbackQueryUpdate) = telegramApi {
    answerCallbackQuery(update.callbackQuery.id).send(user, bot)
    val clientService = get<ClientService>()
    val client = clientService.getClient(UUID.fromString(id)) ?: run {
        message { "–ö–ª–∏–µ–Ω—Ç–∞ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ú–æ–∂–µ—Ç, –≤—ã –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É?" }.send(user, bot)
        return@telegramApi
    }

    sendClientInfo(user, bot, client)
}
