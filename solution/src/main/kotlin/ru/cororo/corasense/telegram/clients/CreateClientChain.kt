package ru.cororo.corasense.telegram.clients

import eu.vendeli.tgbot.TelegramBot
import eu.vendeli.tgbot.annotations.InputChain
import eu.vendeli.tgbot.api.message.message
import eu.vendeli.tgbot.generated.getAllState
import eu.vendeli.tgbot.types.User
import eu.vendeli.tgbot.types.internal.BreakCondition
import eu.vendeli.tgbot.types.internal.ChainLink
import eu.vendeli.tgbot.types.internal.ProcessedUpdate
import eu.vendeli.tgbot.types.internal.chain.BaseStatefulLink
import org.koin.core.component.get
import ru.cororo.corasense.inject.telegramApi
import ru.cororo.corasense.model.client.data.Client
import ru.cororo.corasense.service.ClientService
import ru.cororo.corasense.telegram.cancel.cancelButton
import ru.cororo.corasense.telegram.startKeyboard
import java.util.UUID

@InputChain
object CreateClientChain {
    object Uuid : BaseStatefulLink() {
        override val breakCondition: BreakCondition = BreakCondition { _, update, _ ->
            if (update.text == "–°–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ") return@BreakCondition false

            return@BreakCondition try {
                UUID.fromString(update.text)
                false
            } catch (_: Exception) {
                true
            }
        }

        override suspend fun breakAction(user: User, update: ProcessedUpdate, bot: TelegramBot) {
            message { "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–µ—Ä–Ω—ã–π UUID –∏–ª–∏ –≤—ã–±–µ—Ä–∏ —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ." }.inlineKeyboardMarkup {
                cancelButton()
            }.send(user, bot)
        }

        override suspend fun action(user: User, update: ProcessedUpdate, bot: TelegramBot): String {
            message { "–û—Ç–ª–∏—á–Ω–æ!" }.replyKeyboardRemove().send(user, bot)
            message { "–í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω –∫–ª–∏–µ–Ω—Ç–∞." }.inlineKeyboardMarkup { cancelButton() }.send(user, bot)
            return if (update.text == "–°–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ") UUID.randomUUID().toString() else update.text
        }
    }

    object Login : BaseStatefulLink() {
        override val breakCondition: BreakCondition = BreakCondition { _, update, _ -> update.text.length !in 3..128 }

        override suspend fun breakAction(user: User, update: ProcessedUpdate, bot: TelegramBot) {
            message { "–õ–æ–≥–∏–Ω –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–ª–∏–Ω—É –æ—Ç 3 –¥–æ 128 —Å–∏–º–≤–æ–ª–æ–≤." }.inlineKeyboardMarkup { cancelButton() }
                .send(user, bot)
        }

        override suspend fun action(
            user: User,
            update: ProcessedUpdate,
            bot: TelegramBot
        ): String {
            message { "–í–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞." }.inlineKeyboardMarkup { cancelButton() }.send(user, bot)
            return update.text
        }
    }

    object Age : BaseStatefulLink() {
        override val breakCondition: BreakCondition = BreakCondition { _, update, _ -> update.text.toIntOrNull().let { it ==  null || it !in 0..130 }}

        override suspend fun breakAction(user: User, update: ProcessedUpdate, bot: TelegramBot) {
            message { "–í–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 130." }.inlineKeyboardMarkup { cancelButton() }
                .send(user, bot)
        }

        override suspend fun action(user: User, update: ProcessedUpdate, bot: TelegramBot): String {
            message { "–í—ã–±–µ—Ä–∏ –ø–æ–ª –∫–ª–∏–µ–Ω—Ç–∞." }.replyKeyboardMarkup {
                +"MALE"
                +"FEMALE"
            }.send(user, bot)
            return update.text.uppercase()
        }
    }

    object Gender : BaseStatefulLink() {
        override val breakCondition: BreakCondition = BreakCondition { _, update, _ ->
            try {
                Client.Gender.valueOf(update.text.uppercase())
                false
            } catch (_: Exception) {
                true
            }
        }

        override suspend fun breakAction(user: User, update: ProcessedUpdate, bot: TelegramBot) {
            message { "–í–≤–µ–¥–∏ male –∏–ª–∏ female." }.inlineKeyboardMarkup { cancelButton() }.send(user, bot)
        }

        override suspend fun action(user: User, update: ProcessedUpdate, bot: TelegramBot): String {
            message { "–í–≤–µ–¥–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞." }.inlineKeyboardMarkup { cancelButton() }.send(user, bot)
            return update.text
        }
    }

    object Location : ChainLink() {
        override val breakCondition: BreakCondition = BreakCondition { _, update, _ -> update.text.length !in 3..128 }

        override suspend fun breakAction(user: User, update: ProcessedUpdate, bot: TelegramBot) {
            message { "–í–≤–µ–¥–∏ —Å—Ç—Ä–æ–∫—É —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç 3 –¥–æ 128 —Å–∏–º–≤–æ–ª–æ–≤." }.inlineKeyboardMarkup { cancelButton() }.send(user, bot)
        }

        override suspend fun action(
            user: User,
            update: ProcessedUpdate,
            bot: TelegramBot
        ) = telegramApi {
            message { "–ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞..." }.startKeyboard().send(user, bot)
            val state = user.getAllState(CreateClientChain)
            val id = UUID.fromString(state.Uuid ?: "")
            val login = state.Login ?: ""
            val age = state.Age?.toInt() ?: 0
            val gender = Client.Gender.valueOf(state.Gender ?: "")
            val location = update.text
            val client = Client(id, login, age, location, gender)
            val clientService = get<ClientService>()
            clientService.saveClient(client)
            message { """
                ‚úÖ –¢–≤–æ–π –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω.
                üìî ID: ${client.id}
                ‚úèÔ∏è –õ–æ–≥–∏–Ω: ${client.login}
                üåø –í–æ–∑—Ä–∞—Å—Ç: ${client.age}
                üë®‚Äçü¶± –ü–æ–ª: ${client.gender.russianName}
                üó∫ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${client.location}
            """.trimIndent() }
                .inlineKeyboardMarkup {
                    callbackData("\uD83D\uDD27 –ù–∞—Å—Ç—Ä–æ–π–∫–∞") { "configure-client?id=${client.id}" }
                    callbackData("‚ûï –°–æ–∑–¥–∞—Ç—å –µ—â—ë") { "create-client" }
                }.send(user, bot)
        }

    }
}